#Code Explain for avExecutionTime.java

This code calculates the average execution time for jobs in a log file.
It does this by first reading the file and storing the time and ID for when a job is created and when it ends in separate ArrayLists.
Then, it compares the ID of the created jobs with the ID of the ended jobs, and if they match,
it calculates the execution time by subtracting the end time from the start time,
and adding it to an ArrayList of execution times.

It also calculates the total execution time,
the maximum and minimum execution time,
and the job ID for the job that took the longest and shortest time to execute.




-------
This Java code reads a file and calculates the average execution time of jobs that are contained in it.
It uses a BufferedReader to read the file line by line and splits each line into an array of strings using the split() method.
It then uses two ArrayLists, one for the start time of the job, and one for the end time of the job, to store the corresponding data.
The code then uses the LocalDateTime and ChronoUnit classes to calculate the execution time of each job
and stores the execution time in an ArrayList.
Finally, it calculates the average execution time by dividing the total execution time by the number of jobs.
It also finds the maximum and minimum execution time among all the jobs and the corresponding job id.