
@Members
1. Sharran A/L Ganesen                      (22004887)      - Multimedia Computing 
2. Eisraq Rejab bin Hassan                  (U2102340)      - Software Engineering
3. Elvis Sawing anak Muran                  (U2101680/2)    - Software Engineering
4. Muhammad Arif Fahmi bin Mohd Sharipuddin (U2101699/2)    - Multimedia Computing
5. Muhammad Faisal Bin Hamzah               (U2101641)      - Computer System and Networking

|------------------------------------------------------------------------------------------------|

@Metrics to consider:

1)Number of jobs created/ended within a give time range (recheck)
2)Number of jobs by partitions * -bar graph
3)Number of jobs causing error and the corresponding userb* 
4)Average executation time of the jobs submitted to UMHPC 

|------------------------------------------------------------------------------------------------|

@Reports:

1)Metrics
2)Source code
3)Output
 - what we get
 -Graph
 -Table

|------------------------------------------------------------------------------------------------|

@Challenges and Issues

Challenges :
- We dont have the knowledge to use JavaFX : We learnt Java FX

Issues:
- The outcomes of the findings are not the same between the code(between members)
- Didnt realised there's two ways job being created



|------------------------------------------------------------------------------------------------|


@FINAL@
@Metrics to consider:

1)Number of job errors by users //(A)
    -Name : No. of errors
    -Total errors : 143

User                          Number of errors    
----------------------------------------------------
farhatabjani                  3                   
yatyuen.lim                   1                   
aah                           12                  
lin0618                       4                   
janvik                        4                   
xinpeng                       1                   
kurk                          1                   
htt_felicia                   21                  
hva170037                     5                   
mk_98                         24                  
han                           11                  
fairus                        10                  
f4ww4z                        4                   
manoj                         4                   
ongkuanhung                   1                   
shahreeza                     6                   
liew.wei.shiung               3                   
hass                          1                   
hongvin                       9                   
chiuling                      2                   
lobbeytan                     3                   
fahmi8                        1                   
aznul                         2                   
tingweijing                   2                   
noraini                       4                   
roland                        4                   

The number of jobs causing error : 143




2)Number of job by partition for each month //(A)

ex. for June 2022

Number of Jobs by Partition in June 2022
+--------------------------------------------+
|Partition                Total Jobs         |
+--------------------------------------------+
|gpu-v100s                    224            |
|cpu-opteron                  961            |
|gpu-k10                      115            |
|gpu-titan                    212            |
|cpu-epyc                     612            |
|gpu-k40c                      67            |
+--------------------------------------------+  
...

3)Number of Jobs by Partitions //Partition.jobByPartitions(fileName); (J)

               GPU-V100s      GPU-K10        GPU-Titan      GPU-K40c       CPU-Opteron         CPU-EPYC       
--------------------------------------------------------------------------------------------------------
TOTAL          618            439            673            301            4920                3015           

The highest number of partition : CPU-Opteron = 4920
The lowest number of partition : GPU-K40c = 301

---------------------
//(A) total no. of jobs : 9966

//(J) Number of job created : 8479
      Number of job ended   : 9216
-------------------

4)












_________________________

Deleted:

- ExecutionTime.java


        //Segment A

       // import java.util.Collections;

        Collections.sort(exeTime);
        double median = 0;
        double firstQuartile = 0;
        double thirdQuartile = 0;

        firstQuartile = exeTime.size()*0.25;
        thirdQuartile = exeTime.size()*0.75;

        System.out.printf("First Quartile of execution time : %.1f mins\n" , (exeTime.get((int)firstQuartile) + exeTime.get((int)firstQuartile+1))/2/1000/60);

        if(exeTime.size()%2 == 0){
            median =(exeTime.get((int) Math.floor(exeTime.size()/2))+  exeTime.get(((int)Math.floor(exeTime.size()/2)+1)) )/2;
        }

        else if(exeTime.size()%2==1){
            median = exeTime.get((int) Math.ceil(exeTime.size()/2));
        }
        median = (median / 1000)/60;
        System.out.printf("Median of execution time         : %.1f mins\n", median);

        System.out.printf("Third Quartile of execution time : %.1f mins\n" , (exeTime.get((int)thirdQuartile) + exeTime.get((int)thirdQuartile+1))/2/1000/60);


To print all JobID
//        System.out.printf("\n%-8s%-20s%-20s%-30s%-30s%-30s\n","No.","Completed job ID","Ended job ID","job Completed Time","job Ended Time","Execution Time (mins)");
//        System.out.print("--------------------------------------------------------------------------------------------------------------------------------------");

        for(int i=0;i<createJobId.size();i++){

            for(int j=0;j<endJobId.size();j++){
                if(createJobId.get(i).equals(endJobId.get(j))){
                    LocalDateTime createTime = Main.convertToLDT(createJobTime2[i]);
                    LocalDateTime endTime = Main.convertToLDT(endJobTime2[j]);

                    long milliBetween = ChronoUnit.MILLIS.between(createTime,endTime);

                    if(milliBetween < 0)
                        milliBetween *=-1;

                    double milli = (double)milliBetween;

                    exeTime.add(milli);

                    double output = (double)((milliBetween/1000.0)/60);
                    No++;
//                    System.out.printf("\n%-8d%-20s%-20s%-30s%-30s",No,createJobId.get(i),endJobId.get(j),createJobTime2[i],endJobTime2[j]);
//                    System.out.printf("%.3f",output);